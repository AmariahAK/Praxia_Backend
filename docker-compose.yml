services:
  web:
    build: .
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@example.com
      - DJANGO_SUPERUSER_PASSWORD=adminpassword
    depends_on:
      - db
      - redis
    restart: always

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    restart: always

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: always

  celery:
    build: .
    command: celery -A praxia_backend worker -l INFO
    volumes:
      - .:/app
      - media_volume:/app/media
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - web
      - redis
    restart: always

  celery-beat:
    build: .
    command: celery -A praxia_backend beat -l INFO
    volumes:
      - .:/app
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - web
      - redis
    restart: always

  monai:
    image: projectmonai/monai:latest
    ports:
      - "8888:8888"
    volumes:
      - ./data/models:/models

  sam:
    image: sam-med2d:latest
    build:
      context: .
      dockerfile: Dockerfile.sam
    volumes:
      - ./data/models:/models

  # Add monitoring services for development
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: always

  libretranslate:
    image: libretranslate/libretranslate
    ports:
      - "5001:5000"
    environment:
      - LT_LOAD_ONLY=es,en, fr
      - LT_THREADS=4
      - LT_MEMORY=100M
      - LT_UPDATE_MODELS=false
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: always

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: always

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable
    restart: always

volumes:
  postgres_data:
  static_volume:
  media_volume:
  prometheus_data:
  grafana_data:
